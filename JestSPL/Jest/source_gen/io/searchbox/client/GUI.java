package io.searchbox.client;

/*Generated by MPS */

import javax.swing.JPanel;
import javax.swing.JFrame;
import javax.swing.JTextField;
import javax.swing.JButton;
import javax.swing.JTextArea;
import java.awt.event.ActionListener;
import io.searchbox.client.config.HttpClientConfig;
import javax.swing.JTabbedPane;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.BoxLayout;
import javax.swing.JLabel;
import java.awt.FlowLayout;
import javax.swing.JScrollPane;
import java.awt.GridLayout;
import java.awt.Component;
import java.awt.event.ActionEvent;
import io.searchbox.indices.CreateIndex;
import java.io.IOException;
import io.searchbox.indices.DeleteIndex;
import io.searchbox.core.Index;
import io.searchbox.core.Update;
import io.searchbox.core.Delete;
import org.apache.http.HttpHost;
import org.elasticsearch.search.builder.SearchSourceBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import io.searchbox.core.Search;
import io.searchbox.core.SearchResult;
import io.searchbox.core.Get;

public class GUI extends JPanel {


  private JFrame mainFrame;
  private JestClientFactory factory;
  private JestClient client;
  private JTextField indexTextField;
  private JButton create;
  private JButton update;
  private JButton delete;
  private JTextArea jsonArea;
  private JTextField usrTxt;
  private JTextField pswTxt;
  private JTextField proxyTxt;
  private ActionListener[] createIndexListener;

  public GUI() {
    prepareGUI();
  }

  public static void main(String[] args) {
    GUI gui = new GUI();
    gui.showJPanelDemo();
  }

  private void prepareGUI() {
    mainFrame = new JFrame("Java Swing Examples");
    mainFrame.setSize(600, 600);

    factory = new JestClientFactory();
    factory.setHttpClientConfig(new HttpClientConfig.Builder("http://localhost:9200").multiThreaded(true).build());
    client = factory.getObject();

    JTabbedPane adminTabManipulate = new JTabbedPane();
    adminTabManipulate.addTab("Manipulate", manipulateTab());
    adminTabManipulate.addTab("Search", seacrhTab());
    adminTabManipulate.addTab("Get Document", getDocument());

    mainFrame.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent windowEvent) {
        System.exit(0);
      }
    });

    mainFrame.add(adminTabManipulate);
    mainFrame.setVisible(true);
  }

  private void showJPanelDemo() {

    mainFrame.setVisible(true);

  }

  private JPanel manipulateTab() {

    JPanel panel = new JPanel();
    panel.setLayout(new BoxLayout(panel, BoxLayout.PAGE_AXIS));

    JLabel indexLabel = new JLabel("Index");
    indexTextField = new JTextField();
    indexTextField.setPreferredSize(indexTextField.getPreferredSize());

    JPanel panelIndexButtons = new JPanel();
    panelIndexButtons.setLayout(new FlowLayout());
    JButton createIndex = new JButton("Create Index");
    JButton deleteIndex = new JButton("Delete Index");
    panelIndexButtons.add(createIndex);
    panelIndexButtons.add(deleteIndex);

    JPanel panelButtons = new JPanel();
    panelButtons.setLayout(new FlowLayout());
    create = new JButton("Create");
    update = new JButton("Update");
    delete = new JButton("Delete");

    JLabel json = new JLabel("JSON String");
    jsonArea = new JTextArea();
    jsonArea.setPreferredSize(jsonArea.getPreferredSize());
    JScrollPane scrollPane = new JScrollPane(jsonArea);

    JPanel authenticationProxy = new JPanel();
    authenticationProxy.setLayout(new GridLayout(1, 2));

    JPanel authentication = new JPanel();
    authentication.setLayout(new BoxLayout(authentication, BoxLayout.PAGE_AXIS));
    JLabel authLabel = new JLabel("Authentication");
    JButton connect = new JButton("Connect");

    JPanel usrPanel = new JPanel();
    usrPanel.setLayout(new FlowLayout());
    JLabel usrLabel = new JLabel("Username");
    usrTxt = new JTextField("", 10);
    usrTxt.setPreferredSize(usrTxt.getPreferredSize());
    usrPanel.add(usrLabel);
    usrPanel.add(usrTxt);

    JPanel pswPanel = new JPanel();
    usrPanel.setLayout(new FlowLayout());
    JLabel pswLabel = new JLabel("Password");
    pswTxt = new JTextField("", 10);
    pswTxt.setPreferredSize(pswTxt.getPreferredSize());
    pswPanel.add(pswLabel);
    pswPanel.add(pswTxt);

    authentication.add(authLabel);
    authentication.add(usrPanel);
    authentication.add(pswPanel);
    authentication.add(connect);

    JPanel proxy = new JPanel();
    proxy.setLayout(new BoxLayout(proxy, BoxLayout.PAGE_AXIS));
    JLabel proxyLabel = new JLabel("Proxy");
    proxyTxt = new JTextField();
    proxyTxt.setPreferredSize(proxyTxt.getPreferredSize());
    JButton connectProxy = new JButton("Connect");
    proxy.add(proxyLabel);
    proxy.add(proxyTxt);
    proxy.add(connectProxy);

    authenticationProxy.add(authentication);
    authenticationProxy.add(proxy);

    panelButtons.add(create);
    panelButtons.add(update);
    panelButtons.add(delete);

    panel.add(indexLabel);
    panel.add(indexTextField);
    panel.add(panelIndexButtons);
    panel.add(json);
    panel.add(jsonArea);
    panel.add(scrollPane);
    panel.add(panelButtons);
    panel.add(authenticationProxy);
    panel.setAlignmentX(Component.LEFT_ALIGNMENT);

    createIndex.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent p0) {
        try {
          client.execute(new CreateIndex.Builder(indexTextField.getText()).build());
          System.out.println("Index created\n");
        } catch (IOException e) {
          System.out.println("error while trying to create index");
        }
      }
    });

    deleteIndex.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent p0) {
        try {
          client.execute(new DeleteIndex.Builder(indexTextField.getText()).build());
          System.out.println("Index Deleted\n");
        } catch (IOException e) {
          System.out.println("Error while trying to delete index");
        }
      }
    });

    create.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent p0) {
        String source = jsonArea.getText();
        Index index = new Index.Builder(source).index(indexTextField.getText()).type("tweet").id("1").build();
        try {
          String docToCreate = jsonArea.getText();
          Index indexCreated = new Index.Builder(docToCreate).index(indexTextField.getText()).type("user").id("1").build();
          client.execute(indexCreated);
          System.out.println("Document created\n");
        } catch (IOException e) {
          System.out.println("error while trying to create document\n");
        }
      }
    });

    update.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent p0) {
        String str = jsonArea.getText();
        try {
          client.execute(new Update.Builder(str).index(indexTextField.getText()).type("tweet").id("1").build());
          System.out.println("Updating the document...\n");
        } catch (IOException e) {
          System.out.println("error while updating document\n");
        }
      }
    });

    delete.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent p0) {
        try {
          client.execute(new Delete.Builder("1").index(indexTextField.getText()).type("users").build());
          System.out.println("Document deleted\n");
        } catch (IOException e) {
          System.out.println("error while deleting document\n");
        }
      }
    });

    connect.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent p0) {
        System.out.println("Connecting...\n");
        factory.setHttpClientConfig(new HttpClientConfig.Builder("http://localhost:9200").defaultCredentials(usrTxt.getText(), new String(pswTxt.getText())).build());
        System.out.println("Connected.\n");
      }


    });

    connectProxy.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent p0) {
        System.out.println("Connecting proxy...\n");
        String url = proxyTxt.getText();
        String[] urlSplit = url.split(":");
        String server = urlSplit[0];
        int port = Integer.parseInt(urlSplit[1]);
        factory.setHttpClientConfig(new HttpClientConfig.Builder("http://localhost:9200").proxy(new HttpHost(server, port)).build());
        System.out.println("Connected.\n");
      }
    });

    return panel;
  }

  private JPanel seacrhTab() {
    JPanel panel = new JPanel();
    panel.setLayout(new BoxLayout(panel, BoxLayout.PAGE_AXIS));

    JLabel searchLabel = new JLabel("Search");
    JTextField searchTxtF = new JTextField();
    searchTxtF.setPreferredSize(searchTxtF.getPreferredSize());

    JLabel results = new JLabel("Results");
    JTextArea resultsArea = new JTextArea();
    resultsArea.setPreferredSize(resultsArea.getPreferredSize());

    JButton search = new JButton("Search");

    panel.add(searchLabel);
    panel.add(searchTxtF);
    panel.add(search);
    panel.add(results);
    panel.add(resultsArea);

    search.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent p0) {
        try {
          SearchSourceBuilder searchSource = new SearchSourceBuilder();
          searchSource.query(QueryBuilders.matchQuery(searchTxtF.getText(), "documentName"));
          Search searchS = new Search.Builder(searchSource.toString()).build();
          SearchResult result = client.execute(searchS);
          resultsArea.setText(result.getSourceAsString());
          System.out.println("Search document\n");
        } catch (IOException e) {
          System.out.println("error while trying to search for document");
        }
      }
    });

    return panel;
  }

  private JPanel getDocument() {
    JPanel panel = new JPanel();
    panel.setLayout(new BoxLayout(panel, BoxLayout.PAGE_AXIS));

    JPanel panelName = new JPanel();
    panelName.setLayout(new FlowLayout());
    JTextField indexName = new JTextField("", 10);
    indexName.setPreferredSize(indexName.getPreferredSize());
    JButton getDoc = new JButton("Get Document");
    panelName.add(indexName);
    panelName.add(getDoc);

    JTextArea results = new JTextArea();
    results.setPreferredSize(results.getPreferredSize());

    panel.add(panelName);
    panel.add(results);

    getDoc.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent p0) {
        String resString = new String();
        try {
          client.execute(new CreateIndex.Builder(indexName.getText()).build());

          Get get = new Get.Builder(indexName.getText(), "1").type("users").build();
          JestResult res = client.execute(get);
          results.setText(res.getSourceAsString());
        } catch (IOException e) {
          System.out.println("Error while getting the document");
        }
      }
    });

    return panel;
  }

}
